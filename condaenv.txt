#Create a conda environment
conda create --name <environment-name> python=<version:2.7/3.5>
or
conda env create -f env.yml --prefix ./.envs
conda activate ./.envs
#There are a few things to be aware of when placing conda environments outside of the default envs folder.
#- Conda can no longer find your environment with the --name flag. You’ll generally need to pass the --prefix flag along with the environment’s full path to find the environment.
#- Specifying an install path when creating your conda environments makes it so that your command prompt is now prefixed with the active environment’s absolute path rather than the environment’s name.

#To create a requirements.txt file:
conda list -e > requirements.txt #Save all the info about packages to your folder

#To export environment file
activate <environment-name>
conda env export --from-history | grep -v "prefix" > <environment-name>.yml
# --from-history will only include packages that you’ve explicitly asked for, as opposed to including every package in your environment.
# Use the existing argument --no-builds to keep just the leading version numbers
# 如果直接导出 导出的结果会是 pytorch=2.0.0=cpu_py311hb4bb8ad_0 这种样子 加上 --no-builds 就只保留 pytorch=2.0.0
# 发现如果加了 --from-history 就不用加 --no-builds 了

# 遇到的另外一个蛋疼的问题 --from-history 会抛弃 pip 中的依赖
# 解决方案 使用 conda-env-export 虽然输出跟 conda 的不太一样 但是满足需求了
conda-env-export | grep -v "prefix" > <environment-name>.yml
# 更简单直接的方式 python export_env.py -o env.yml
#pip freeze
pip freeze > requirements.txt
#install with requirements.txt
pip install -r requirements.txt